name: Test Env Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - test-env

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          npm install -g eas-cli@5.9.1

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - run: npm ci

      - name: Configure Expo token
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          echo "EXPO_TOKEN configured as environment variable"
          eas whoami

      # Générer un keystore pour le build local
      - name: Generate Keystore
        run: |
          mkdir -p android/app
          keytool -genkeypair -v \
            -keystore keystore.jks \
            -alias upload \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -dname "CN=Upload Key, OU=Development, O=YourOrganization, L=City, ST=State, C=Country" \
            -storepass android \
            -keypass android

      # Création du fichier de config eas.json temporaire pour le build local
      - name: Create temporary eas.json config
        run: |
          cat > eas.local.json << EOF
          {
            "cli": {
              "version": ">= 5.9.1",
              "appVersionSource": "remote"
            },
            "build": {
              "local": {
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "env": {
                    "ANDROID_SDK_ROOT": "$ANDROID_SDK_ROOT"
                  }
                }
              }
            }
          }
          EOF
          
          cat eas.local.json

      # Exécuter un build local avec EAS
      - name: Local build with EAS
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          mkdir -p build
          
          # Configurer le keystore temporaire
          mkdir -p android/app
          cp keystore.jks android/app/
          
          # Créer le fichier de configuration gradle.properties
          mkdir -p android
          echo 'MYAPP_UPLOAD_STORE_FILE=keystore.jks' > android/gradle.properties
          echo 'MYAPP_UPLOAD_KEY_ALIAS=upload' >> android/gradle.properties
          echo 'MYAPP_UPLOAD_STORE_PASSWORD=android' >> android/gradle.properties
          echo 'MYAPP_UPLOAD_KEY_PASSWORD=android' >> android/gradle.properties
          
          # Exécuter le build local (avec le fichier eas.json modifié)
          eas build:configure
          eas build --platform android --profile local --local --output=build/app.apk --config=eas.local.json

      # Si le build local échoue, essayer la méthode de fallback
      - name: Fallback - use prebuild and Gradle directly
        if: failure()
        run: |
          npx expo prebuild --platform android
          cd android
          ./gradlew assembleRelease
          mkdir -p ../build
          cp app/build/outputs/apk/release/app-release.apk ../build/app.apk

      - name: Extract changelog entry
        id: changelog
        run: |
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          SECTION=$(awk -v tag="$CURRENT_TAG" '
            BEGIN {found=0}
            /^## / {
              if ($0 ~ "\\["tag"\\]") {found=1; next}
              else if ($0 ~ /^## \[[0-9]+\.[0-9]+\.[0-9]+\]/) {found=0}
            }
            found {print}
          ' client/CHANGELOG.md)
          
          if [ -z "$SECTION" ]; then
            SECTION=$(cat client/CHANGELOG.md)
          fi
          
          CLEAN_SECTION=$(echo "$SECTION" | sed '/^$/d')
          
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$CLEAN_SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release with Artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: "v${{ github.ref_name }} (Test Env)"
          body: |
            ### Version ${{ github.ref_name }} (Test Environment)
            
            <details>
            <summary>Dernières modifications</summary>
            
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
            
            </details>
            
            **Artifacts disponibles:**
            - Roadbook.apk (Android Package)
            
            [Voir le CHANGELOG complet](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/client/CHANGELOG.md)
          prerelease: true
          files: |
            build/app.apk

      - name: Create PR to main
        if: github.ref == 'refs/heads/test-env' && !contains(github.event.head_commit.message, 'chore(release)')
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: test-env
          title: "Merge test-env → main (v${{ github.ref_name }})"
          body: |
            ### Nouvelles modifications dans test-env
            
            **Version:** ${{ github.ref_name }}
            **Artifacts:** [Voir la release](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }})
            
            <details>
            <summary>Dernières modifications</summary>
            
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
            
            </details>
          labels: "automated-pr,needs-review"