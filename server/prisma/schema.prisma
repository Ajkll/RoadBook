generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- USER MANAGEMENT ----

enum UserRole {
  APPRENTICE  // Learning driver
  GUIDE       // Parent or friend mentoring the apprentice
  INSTRUCTOR  // Professional driving instructor
  ADMIN       // System administrator
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  passwordHash      String
  displayName       String
  firstName         String?
  lastName          String?
  nationalRegisterNumber String? @unique  
  birthDate         DateTime?
  phoneNumber       String?
  profilePicture    String?
  address           String?
  role              UserRole    @default(APPRENTICE)
  bio               String?     
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations - Roadbooks
  ownedRoadbooks    RoadBook[]  @relation("Owner")
  guidedRoadbooks   RoadBook[]  @relation("Guide")
  
  // Relations - Sessions
  participatedSessions Session[] @relation("Participant")
  validatedSessions    Session[] @relation("Validator")
  
  // Relations - Auth
  refreshTokens    RefreshToken[]
}

// ---- ROADBOOK CORE ----

enum RoadBookStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

model RoadBook {
  id                String         @id @default(uuid())
  title             String
  description       String?
  status            RoadBookStatus @default(ACTIVE)
  targetHours       Int            @default(30)     
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Owner (apprentice) relation
  apprenticeId      String
  apprentice        User           @relation("Owner", fields: [apprenticeId], references: [id])
  
  // Guide/Instructor relations
  guideId           String?
  guide             User?          @relation("Guide", fields: [guideId], references: [id])
  
  // Sessions and progress tracking
  sessions          Session[]
}

// ---- SESSIONS & TRAINING ----

model Session {
  id                String    @id @default(uuid())
  roadbookId        String
  roadbook          RoadBook  @relation(fields: [roadbookId], references: [id])
  
  // Session details
  date              DateTime
  startTime         DateTime
  endTime           DateTime?
  duration          Int?      
  
  // Location data
  startLocation     String?
  endLocation       String?
  distance          Float?    
  routeData         Json?     
  
  // Environment conditions
  weather           WeatherCondition? @default(CLEAR)
  daylight          DaylightCondition? @default(DAY)
  roadTypes         String[]  // Store as array of strings
  
  // Notes and feedback
  notes             String?
  
  // Participants
  apprenticeId      String
  apprentice        User       @relation("Participant", fields: [apprenticeId], references: [id])
  validatorId       String?    
  validator         User?      @relation("Validator", fields: [validatorId], references: [id])
  validationDate    DateTime?
}

enum WeatherCondition {
  CLEAR
  CLOUDY
  RAINY
  SNOWY
  FOGGY
  WINDY
  OTHER
}

enum DaylightCondition {
  DAY
  NIGHT
  DAWN_DUSK
}

// ---- AUTHENTICATION ----

model RefreshToken {
  id          String    @id @default(uuid())
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
}