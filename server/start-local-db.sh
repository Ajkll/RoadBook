#!/bin/bash

##############################################################################
# Script de d√©marrage d'une base de donn√©es PostgreSQL locale
# =========================================================
#
# Ce script d√©marre une base de donn√©es PostgreSQL dans un conteneur Docker
# et l'expose sur le port 5433 pour √©viter les conflits avec d'autres
# installations PostgreSQL.
#
# Auteur: √âquipe RoadBook
# Date: Avril 2025
##############################################################################

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}===== D√©marrage de la base de donn√©es PostgreSQL locale =====${NC}"

# Variables
DB_CONTAINER_NAME="roadbook-postgres-dev"
DB_PORT=5433
DB_USER=postgres
DB_PASSWORD=postgres
DB_NAME=roadbook_dev

# V√©rifier si Docker est install√©
if ! command -v docker >/dev/null 2>&1; then
  echo -e "${RED}‚ö†Ô∏è  Docker n'est pas install√©. Veuillez installer Docker.${NC}"
  exit 1
fi

# V√©rifier si Docker est en cours d'ex√©cution
if ! docker info >/dev/null 2>&1; then
  echo -e "${RED}‚ö†Ô∏è  Le service Docker n'est pas d√©marr√©. Veuillez d√©marrer Docker.${NC}"
  exit 1
fi

# V√©rifier si le conteneur existe d√©j√†
if docker ps -a | grep -q $DB_CONTAINER_NAME; then
  # Si le conteneur existe, v√©rifier s'il est en cours d'ex√©cution
  if docker ps | grep -q $DB_CONTAINER_NAME; then
    echo -e "${GREEN}‚úÖ Conteneur PostgreSQL d√©j√† d√©marr√©.${NC}"
    DB_RUNNING=true
  else
    echo -e "${YELLOW}üîÑ Red√©marrage du conteneur PostgreSQL...${NC}"
    docker start $DB_CONTAINER_NAME
    if [ $? -ne 0 ]; then
      echo -e "${RED}‚ùå Impossible de d√©marrer le conteneur PostgreSQL. Suppression et recr√©ation...${NC}"
      docker rm $DB_CONTAINER_NAME
      DB_RUNNING=false
    else
      DB_RUNNING=true
    fi
  fi
else
  DB_RUNNING=false
fi

# Cr√©er un nouveau conteneur si n√©cessaire
if [ "$DB_RUNNING" = false ]; then
  echo -e "${YELLOW}üîÑ Cr√©ation d'un nouveau conteneur PostgreSQL...${NC}"
  docker run --name $DB_CONTAINER_NAME \
    -e POSTGRES_PASSWORD=$DB_PASSWORD \
    -e POSTGRES_USER=$DB_USER \
    -e POSTGRES_DB=$DB_NAME \
    -p $DB_PORT:5432 \
    -d postgres:14
  
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå √âchec de la cr√©ation du conteneur PostgreSQL.${NC}"
    exit 1
  fi
  
  # Attendre que PostgreSQL soit pr√™t
  echo -e "${YELLOW}‚è≥ Attente que PostgreSQL soit pr√™t...${NC}"
  for i in {1..30}; do
    if docker exec $DB_CONTAINER_NAME pg_isready -h localhost -U postgres > /dev/null 2>&1; then
      echo -e "${GREEN}‚úÖ PostgreSQL est pr√™t!${NC}"
      break
    fi
    echo -n "."
    sleep 1
    if [ $i -eq 30 ]; then
      echo -e "${RED}‚ùå PostgreSQL n'est pas pr√™t apr√®s 30 secondes. Abandon.${NC}"
      exit 1
    fi
  done
fi

# Informations de connexion
echo -e "\n${BLUE}üíæ Informations de connexion PostgreSQL:${NC}"
echo -e "   ‚Üí H√¥te: ${GREEN}localhost${NC}"
echo -e "   ‚Üí Port: ${GREEN}$DB_PORT${NC}"
echo -e "   ‚Üí Utilisateur: ${GREEN}$DB_USER${NC}"
echo -e "   ‚Üí Mot de passe: ${GREEN}$DB_PASSWORD${NC}"
echo -e "   ‚Üí Base de donn√©es: ${GREEN}$DB_NAME${NC}"
echo -e "   ‚Üí URL de connexion: ${GREEN}postgresql://$DB_USER:$DB_PASSWORD@localhost:$DB_PORT/$DB_NAME${NC}"

echo -e "\n${GREEN}‚úÖ Base de donn√©es PostgreSQL pr√™te √† l'emploi!${NC}"
echo -e "${YELLOW}üí° Utilisez les scripts suivants pour interagir avec la base de donn√©es:${NC}"
echo -e "   ‚Üí ${GREEN}./roadbook.sh seed:quick${NC} - Remplir la base de donn√©es avec des donn√©es de test"
echo -e "   ‚Üí ${GREEN}./roadbook.sh prisma:studio${NC} - Ouvrir Prisma Studio pour explorer la base de donn√©es"