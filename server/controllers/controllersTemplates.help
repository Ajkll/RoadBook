/**
 * ResourceController.ts
 * 
 * Purpose: Manages operations related to [resource name]
 * 
 * This controller implements the following endpoints:
 * - GET /api/resource - List all resources
 * - GET /api/resource/:id - Get a specific resource
 * - POST /api/resource - Create a new resource
 * - PUT /api/resource/:id - Update a resource
 * - DELETE /api/resource/:id - Delete a resource
 * 
 * Authentication requirements:
 * - List/Get: Any authenticated user
 * - Create/Update/Delete: Resource owner or admin only
 */

import { Request, Response, NextFunction } from 'express';
import { ResourceService } from '../services/resource.service';

/**
 * List all resources, with optional filtering
 */
export const listResources = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const filters = req.query;
    const resources = await ResourceService.findAll(filters);
    return res.status(200).json({ data: resources });
  } catch (error) {
    next(error);
  }
};

/**
 * Get a specific resource by ID
 */
export const getResource = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const resource = await ResourceService.findById(id);
    
    if (!resource) {
      return res.status(404).json({ error: 'Resource not found' });
    }
    
    return res.status(200).json({ data: resource });
  } catch (error) {
    next(error);
  }
};

// Additional methods for create, update, delete...

export default {
  listResources,
  getResource,
  // other methods...
};