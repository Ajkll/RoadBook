/**
 * /server/middleware
 * 
 * Middleware functions process requests before they reach route handlers
 * or process responses before they're sent to clients.
 * 
 * Key files:
 * - auth.middleware.ts: Authentication and authorization checks
 * - error.middleware.ts: Centralized error handling
 * - validation.middleware.ts: Request data validation
 * 
 * Common middleware types:
 * - Authentication: Verify user identity
 * - Validation: Ensure request data meets requirements
 * - Logging: Record request/response information
 * - Error handling: Process and format errors
 * - Rate limiting: Prevent abuse of the API
 * 
 * Example middleware:
 * ```typescript
 * export const authenticateJWT = (req: Request, res: Response, next: NextFunction) => {
 *   const token = req.headers.authorization?.split(' ')[1];
 *   
 *   if (!token) {
 *     return res.status(401).json({ error: 'Authentication required' });
 *   }
 *   
 *   try {
 *     const decoded = jwt.verify(token, process.env.JWT_SECRET);
 *     req.user = decoded;
 *     next();
 *   } catch (error) {
 *     return res.status(403).json({ error: 'Invalid or expired token' });
 *   }
 * };
 * ```
 */